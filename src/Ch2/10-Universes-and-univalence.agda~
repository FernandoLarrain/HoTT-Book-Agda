{-# OPTIONS --without-K --exact-split #-}

open import Ch1.Type-theory
open import Ch2.1-Types-are-higher-groupoids
open import Ch2.2-Functions-are-functors
open import Ch2.3-Type-families-are-fibrations
open import Ch2.4-Homotopies-and-equivalences
open import Ch2.7-Σ-types
open import Ch2.9-Π-types-and-funext

module Ch2.10-Universes-and-univalence where


-- Lemma 2.10.1 (from identity to equivalence)

idtoeqv : (A B : 𝓤 ̇) → (A ≡ B) → (A ≃ B)
idtoeqv {𝓤} A B p =
  transport (𝑖𝑑 (𝓤 ̇ )) p ,
  qinv-to-isequiv (ℍ A (λ B p → qinv (transport (𝑖𝑑 (𝓤 ̇)) p)) (qinv-𝑖𝑑 A) B p)


-- Axiom 2.10.3 (Univalence)

-- (i) Definition of univalence for a given universe

is-univalent : (𝓤 : Universe) → 𝓤 ⁺ ̇
is-univalent 𝓤 = (X Y : 𝓤 ̇ ) → isequiv (idtoeqv X Y)

-- (ii) Definition of global univalence

Univalence : 𝓤ω
Univalence = ∀ 𝓤 → is-univalent 𝓤

-- (iii) Postulating the axiom

postulate
  univ : Univalence


-- From equivalence to identity

ua : (A B : 𝓤 ̇ ) → (A ≃ B) → (A ≡ B)
ua {𝓤} A B = qinv₁ (isequiv-to-qinv (univ 𝓤 A B))
  

-- Computation rules for univalence

idtoeqv-β : (A B : 𝓤 ̇ ) → (f : A ≃ B) → pr₁ (idtoeqv A B (ua A B f)) ∼ pr₁ f
idtoeqv-β {𝓤} A B f = happly _ (pr₁ f) (pr₁ (dpr-≡ (α f)))
  where
  α : (idtoeqv A B ∘ ua A B) ∼ id
  α = qinv₂ (isequiv-to-qinv (univ 𝓤 A B))

idtoeqv-β' : (A B : 𝓤 ̇ ) → (idtoeqv A B ∘ ua A B) ∼ id
idtoeqv-β' {𝓤} A B = qinv₂ (isequiv-to-qinv (univ 𝓤 A B))


-- Uniqueness rule for univalence

idtoeqv-η : (A B : 𝓤 ̇ ) → (ua A B ∘ idtoeqv A B) ∼ id
idtoeqv-η {𝓤} A B = qinv₃ (isequiv-to-qinv (univ 𝓤 A B))


-- Characterization of refl
  
type-refl : (A : 𝓤 ̇ ) → refl A ≡ ua A A (𝑖𝑑 A , qinv-to-isequiv (qinv-𝑖𝑑 A))
type-refl A = (idtoeqv-η _ _ (refl A)) ⁻¹ ∙ ap (ua A A) (refl _)

-- For _⁻¹, _∙_ and Lemma 2.10.5, it is best to use Lemma 3.5.1. See 5-Subsets-and-prop-resizing
