{-# OPTIONS --without-K --exact-split --safe #-}

module Ch2.6-Cartesian-product-types where

open import Ch1.Type-theory
open import Ch2.1-Types-are-higher-groupoids
open import Ch2.2-Functions-are-functors using (ap)
open import Ch2.3-Type-families-are-fibrations using (transport)
open import Ch2.4-Homotopies-and-equivalences using (qinv)


-- Theorem 2.6.2 (Equalities of pairs are pairs of equalities).

-- (i) From pair of equalities to equality of pairs

pair-≡ : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} → (pr₁ x ≡ pr₁ y) × (pr₂ x ≡ pr₂ y) → x ≡ y
pair-≡ {x = a , b} {.a , .b} (refl .a , refl .b) = refl (a , b)

-- (ii) Propositional uniqueness principle for pairs

×-η : {A : 𝓤 ̇ } {B : 𝓥 ̇ } (z : A × B) → z ≡ (pr₁ z , pr₂ z)
×-η z = pair-≡ (refl _ , refl _)

-- (iii) From equality of pairs to pair of equalities

pr-≡ : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} → x ≡ y → (pr₁ x ≡ pr₁ y) × (pr₂ x ≡ pr₂ y)
pr-≡ r = ap pr₁ r , ap pr₂ r

-- (iv) Propositional computation rules for equality of pairs

ap-pr₁-β : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} (p : pr₁ x ≡ pr₁ y) (q : pr₂ x ≡ pr₂ y) → ap pr₁ (pair-≡ (p , q)) ≡ p
ap-pr₁-β {x = a , b} {y = a , b} (refl a) (refl b) = refl (refl a)

ap-pr₂-β : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} (p : pr₁ x ≡ pr₁ y) (q : pr₂ x ≡ pr₂ y) → ap pr₂ (pair-≡ (p , q)) ≡ q
ap-pr₂-β {x = a , b} {y = a , b} (refl a) (refl b) = refl (refl b)

-- (v) Propositional uniqueness principle for equality of pairs

×-≡-η : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} (r : x ≡ y) → pair-≡ (ap pr₁ r , ap pr₂ r) ≡ r
×-≡-η {x = x} {x} (refl x) = refl (refl x)

-- (vi) Thm. 2.6.7 proper

qinv-pr-≡ : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} → qinv pr-≡
qinv-pr-≡ {A = A} {B} {x} {y} = pair-≡ {x = x} {y} , (Σ-induction (λ p q → pair-≡ (ap-pr₁-β p q , ap-pr₂-β p q)) , ×-≡-η)


-- Componentwise characterization of refl, _⁻¹ and _∙_

pair-refl : {A : 𝓤 ̇ } {B : 𝓥 ̇ } (z : A × B) → refl z ≡ pair-≡ (refl (pr₁ z) , refl (pr₂ z))
pair-refl (a , b) = refl (refl (a , b))

pair-⁻¹ : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y : A × B} (p : x ≡ y) → p ⁻¹ ≡ pair-≡ ((ap pr₁ p ⁻¹) , (ap pr₂ p ⁻¹))
pair-⁻¹ (refl (a , b)) = refl (refl (a , b))

pair-∙ : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {x y z : A × B} (p : x ≡ y) (q : y ≡ z) → p ∙ q ≡ pair-≡ ((ap pr₁ p ∙ ap pr₁ q) , (ap pr₂ p ∙ ap pr₂ q))
pair-∙ (refl (a , b)) (refl (a , b)) = refl (refl (a , b))


-- Theorem 2.6.4 (Transport of pairs).

transport-pair : {Z : 𝓤 ̇ } (A B : Z → 𝓥 ̇ ) {z w : Z} (p : z ≡ w) (x : A z × B z) → transport (λ z → A z × B z) p x ≡ transport A p (pr₁ x) , transport B p (pr₂ x)
transport-pair A B (refl z) (a , b) = refl (a , b)


-- Theorem 2.6.5 (Functoriality of ap under products).

ap-pair : {A : 𝓤 ̇ } {B : 𝓥 ̇ } {A' : 𝓦 ̇ } {B' : 𝓣 ̇ } (g : A → A') (h : B → B') {x y : A × B} (p : pr₁ x ≡ pr₁ y) (q : pr₂ x ≡ pr₂ y) → ap (λ z → g (pr₁ z) , h (pr₂ z)) (pair-≡ (p , q)) ≡ pair-≡ (ap g p , ap h q)
ap-pair g h {a , b} {a , b} (refl a) (refl b) = refl _

