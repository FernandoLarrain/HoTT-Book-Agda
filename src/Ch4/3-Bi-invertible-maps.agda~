{-# OPTIONS --without-K --exact-split #-}

open import Ch1.Type-theory
open import Ch2.Homotopy-type-theory renaming (isequiv to biinv; isequiv₁ to biinv₁; isequiv-to-qinv to biinv-to-qinv; qinv-to-isequiv to qinv-to-biinv)
open import Ch3.Sets-and-logic
open import Ch4.2-Half-adjoint-equivalences

module Ch4.3-Bi-invertible-maps where


-- Definition 4.3.1 (Bi-invertible maps).

{-  In the book, biinv is definitionally equal to isequiv only up to a reordering of factors. Here, we just rename isequiv. -}

_ : {A : 𝓤 ̇} {B : 𝓥 ̇} (f : A → B) → biinv f ≡ has-rinv f × has-linv f  
_ = λ f → refl _


-- Theorem 4.3.2 (biinv f is a proposition).

biinv-is-Prop : {A : 𝓤 ̇} {B : 𝓥 ̇} (f : A → B) → isProp (biinv f)
biinv-is-Prop f = suffices λ ib → ×-preserves-Contr (has-rinv f) (has-linv f) (has-rinv-of-qinv-is-Contr f (biinv-to-qinv ib)) (has-linv-of-qinv-is-Contr f (biinv-to-qinv ib))
  where
  suffices : (biinv f → isContr (biinv f)) → isProp (biinv f)
  suffices = biinv₁ (pr₂ (isProp-≃-inhabited→isContr (biinv f)))
    

-- Corollary 4.3.3 (biinv is equivalent to ishae).

biinv-≃-ishae : {A : 𝓤 ̇} {B : 𝓥 ̇} (f : A → B) → biinv f ≃ ishae f
biinv-≃-ishae f = biimplication-to-equiv _ _
  (biinv-is-Prop f)
  (ishae-is-Prop f)
  (qinv-to-ishae ∘ biinv-to-qinv)
  (qinv-to-biinv ∘ ishae-to-qinv)
  
 
  






