{-# OPTIONS --without-K --exact-split --safe #-}

open import Ch1.Type-theory
open import Ch2.Homotopy-type-theory
open import Ch3.Sets-and-logic
open import Ch4.Equivalences
open import Ch5.8-Id-types-and-id-systems

module int-as-HIT.Z-as-1-HIT where

-- ℤ-algebras and their homomorphisms

Eqv : (𝓤 : Universe) → 𝓤 ⁺ ̇
Eqv 𝓤 = Σ A₁ ꞉ (𝓤 ̇) , Σ A₂ ꞉ (𝓤 ̇) , A₁ ≃ A₂ -- It suffices to consider types in a single universe.


module EqvPreservation {A₁ A₂ : 𝓤 ̇} {B₁ B₂ : 𝓥 ̇} (f₁ : A₁ → B₁) (f₂ : A₂ → B₂) where

  module maps where

  s-pres : (A₁ → A₂) → (B₁ → B₂) → 𝓤 ⊔ 𝓥 ̇
  s-pres s s' = f₂ ∘ s ∼ s' ∘ f₁

  p-pres : (A₂ → A₁) → (B₂ → B₁) → 𝓤 ⊔ 𝓥 ̇
  p-pres p p' = f₁ ∘ p ∼ p' ∘ f₂

  open maps public

  module htpies (s : A₁ → A₂) (p : A₂ → A₁) (s' : B₁ → B₂) (p' : B₂ → B₁) (α : s-pres s s') (β : p-pres p p') where

    aux-γ : f₁ ∘ p ∘ s ∼ p' ∘ s' ∘ f₁
    aux-γ a₁ = β (s a₁) ∙ ap p' (α a₁)

    σ-pres : (p ∘ s ∼ id) → (p' ∘ s' ∼ id) → 𝓤 ⊔ 𝓥 ̇
    σ-pres σ σ' = (a₁ : A₁) → ap f₁ (σ a₁) ≡ aux-γ a₁ ∙ σ' (f₁ a₁)

    aux-δ : f₂ ∘ s ∘ p ∼ s' ∘ p' ∘ f₂
    aux-δ a₂ = α (p a₂) ∙ ap s' (β a₂)

    ρ-pres : (s ∘ p ∼ id) → (s' ∘ p' ∼ id) → 𝓤 ⊔ 𝓥 ̇
    ρ-pres ρ ρ' = (a₂ : A₂) → ap f₂ (ρ a₂) ≡ aux-δ a₂ ∙ ρ' (f₂ a₂)

    -- Preservation of coherence condition

    aux-ε-γ₁ : f₂ ∘ s ∘ p ∘ s ∼ s' ∘ p' ∘ s' ∘ f₁
    aux-ε-γ₁ a₁ = α (p (s a₁)) ∙ ap s' (aux-γ a₁)

    aux-ε-δ₁ : f₂ ∘ s ∘ p ∘ s ∼ s' ∘ p' ∘ s' ∘ f₁
    aux-ε-δ₁ a₁ = aux-δ (s a₁) ∙ ap s' (ap p' (α a₁))

    aux-ε-γ₁-is-aux-ε-δ₁ : aux-ε-γ₁ ∼ aux-ε-δ₁
    aux-ε-γ₁-is-aux-ε-δ₁ a₁ = (refl (α (p (s a₁))) ✦ ap-∙ s' _ _) ∙ ∙-assoc _ _ _

    aux-ε-γ₂ : (σ : p ∘ s ∼ id) (σ' : p' ∘ s' ∼ id) → ((a₁ : A₁) → ap f₁ (σ a₁) ≡ aux-γ a₁ ∙ σ' (f₁ a₁)) → (a₁ : A₁) → ap f₂ (ap s (σ a₁)) ∙ α a₁ ≡ aux-ε-γ₁ a₁ ∙ ap s' (σ' (f₁ a₁))
    aux-ε-γ₂ σ σ' γ a₁ = (ap-∘ s f₂ (σ a₁) ✦ refl (α a₁)) ∙ hnat α (σ a₁) ⁻¹ ∙ (refl (α (p (s a₁))) ✦ (ap-∘ f₁ s' (σ a₁) ⁻¹ ∙ ap (ap s') (γ a₁) ∙ ap-∙ s' _ _)) ∙ ∙-assoc _ _ _

    aux-ε-δ₂ : (ρ : s ∘ p ∼ id) (ρ' : s' ∘ p' ∼ id) → ((a₂ : A₂) → ap f₂ (ρ a₂) ≡ aux-δ a₂ ∙ ρ' (f₂ a₂)) → (a₁ : A₁) → ap f₂ (ρ (s a₁)) ∙ α a₁ ≡ aux-ε-δ₁ a₁ ∙ ρ' (s' (f₁ a₁))
    aux-ε-δ₂ ρ ρ' δ a₁ = (δ (s a₁) ✦ ap-id (α a₁) ⁻¹) ∙ ∙-assoc _ _ _ ⁻¹ ∙ (refl (aux-δ (s a₁)) ✦ (hnat ρ' (α a₁) ∙ (ap-∘ p' s' (α a₁) ⁻¹ ✦ refl (ρ' (s' (f₁ a₁)))))) ∙ ∙-assoc _ _ _  

    module coh (σ : p ∘ s ∼ id) (ρ : s ∘ p ∼ id) (τ : (a₁ : A₁) → ap s (σ a₁) ≡ ρ (s a₁)) (σ' : p' ∘ s' ∼ id) (ρ' : s' ∘ p' ∼ id) (τ' : (b₁ : B₁) → ap s' (σ' b₁) ≡ ρ' (s' b₁)) (γ : σ-pres σ σ') (δ : ρ-pres ρ ρ') where

      τ-pres : 𝓤 ⊔ 𝓥 ̇
      τ-pres = (a₁ : A₁) → (ap (ap f₂) (τ a₁) ✦ refl (α a₁)) ∙ aux-ε-δ₂ ρ ρ' δ a₁ ≡ aux-ε-γ₂ σ σ' γ a₁ ∙ (aux-ε-γ₁-is-aux-ε-δ₁ a₁ ✦ τ' (f₁ a₁))

    open coh public

hae-pres : (A : Eqv 𝓤) (B : Eqv 𝓥) → (pr₁ A → pr₁ B) → (pr₁ (pr₂ A) → pr₁ (pr₂ B)) → 𝓤 ⊔ 𝓥 ̇
hae-pres (A₁ , A₂ , s , p , σ , ρ , τ) (B₁ , B₂ , s' , p' , σ' , ρ' , τ') f₁ f₂ =
  Σ α ꞉ s-pres s s' ,
  Σ β ꞉ p-pres p p' ,
  Σ γ ꞉ σ-pres α β σ σ' ,
  Σ δ ꞉ ρ-pres α β ρ ρ' ,
  τ-pres α β σ ρ τ σ' ρ' τ' γ δ
  where open EqvPreservation f₁ f₂
        open htpies s p s' p'
      


EqvHom : Eqv 𝓤 → Eqv 𝓥 → 𝓤 ⊔ 𝓥 ̇
EqvHom A B = Σ f₁ ꞉ (pr₁ A → pr₁ B) , Σ f₂ ꞉ (pr₁ (pr₂ A) → pr₁ (pr₂ B)) , hae-pres A B f₁ f₂ 


ℤAlg : (𝓤 : Universe) → 𝓤 ⁺ ̇
ℤAlg 𝓤 = Σ A ꞉ (𝓤 ̇) ,
         Σ a₀ ꞉ A ,
         Σ s ꞉ (A → A) ,
         Σ p ꞉ (A → A) ,
         Σ σ ꞉ (p ∘ s ∼ id) ,
         Σ ρ ꞉ (s ∘ p ∼ id) ,
         ((a : A) → ap s (σ a) ≡ ρ (s a))

_ : (𝓤 : Universe) → ℤAlg 𝓤 ≡ (Σ A ꞉ (𝓤 ̇) , Σ a₀ ꞉ A , A ≃ A)
_ = λ 𝓤 → refl _


ℤHom : ℤAlg 𝓤 → ℤAlg 𝓥 → 𝓤 ⊔ 𝓥 ̇
ℤHom (A , a₀ , s) (B , b₀ , s') = Σ f ꞉ (A → B) , Σ p₀ ꞉ (f a₀ ≡ b₀) , hae-pres (A , A , s) (B , B , s') f f


